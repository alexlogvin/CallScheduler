@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models

@inject CallScheduler.Graph.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <MudCard Class="my-3">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">New call</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Date" Required @bind-Date="date" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTimePicker Label="Time" Required @bind-Time="time" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudText>We will add an event in your calendar like this:</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <CalendarBlock Title="@subject" Start="@start" End="@end" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Book">Book</MudButton>
            </MudCardActions>
        </MudCard>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private DateTime defaultDate => DateTime.Today.AddHours(DateTime.Now.Hour + 1);

    private DateTime? date;
    private TimeSpan? time;

    private string userTimeZone = string.Empty;
    private string subject = "Call with a recruiter";
    private string attendees = string.Empty;
    private DateTime start => date?.Date.Add(time ?? defaultDate.TimeOfDay) ?? defaultDate;
    private DateTime end => start.AddMinutes(30);
    private string body = "Click here to join the call: <link>";

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user's time zone
        var user = (await authenticationStateTask).User;
        userTimeZone = user.GetUserGraphTimeZone() ?? "UTC";

        date = defaultDate;
        time = defaultDate.TimeOfDay;
    }

    private async Task Book()
    {
        // Initalize an Event object
        // with user input
        var newEvent = new Event
            {
                Subject = subject,
                Start = new DateTimeTimeZone
                {
                    DateTime = start.ToString("o"),
                    TimeZone = userTimeZone
                },
                End = new DateTimeTimeZone
                {
                    DateTime = end.ToString("o"),
                    TimeZone = userTimeZone
                },
                Body = new ItemBody
                {
                    Content = body,
                    ContentType = BodyType.Text
                }
            };

        // If the user provided attendees (semicolon-delimited
        // list of email addresses) add them
        if (!string.IsNullOrEmpty(attendees))
        {
            var attendeeList = new List<Attendee>();

            var attendeeArray = attendees.Split(";");
            foreach (var email in attendeeArray)
            {
                Console.WriteLine($"Adding {email}");
                attendeeList.Add(new Attendee
                    {
                        // Set to required attendee
                        Type = AttendeeType.Required,
                        EmailAddress = new EmailAddress
                        {
                            Address = email
                        }
                    });
            }

            newEvent.Attendees = attendeeList;
        }

        var graphClient = clientFactory.GetAuthenticatedClient();

        try
        {
            // POST /me/events
            await graphClient.Me
                .Events
                .PostAsync(newEvent);

                StateHasChanged();

            Snackbar.Add("Event created", Severity.Success);
        }
        catch (ServiceException exception)
        {
            Snackbar.Add(exception.Message, Severity.Error);
        }
    }
}
